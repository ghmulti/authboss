// Code generated by go-bindata.
// sources:
// templates/confirm_email.html.tpl
// templates/confirm_email.txt.tpl
// templates/recover_email.html.tpl
// templates/recover_email.txt.tpl
// DO NOT EDIT!

package response

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confirm_emailHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x0d\x82\x50\x0c\x06\xe0\xfb\x9b\xe2\x0f\x03\xd8\x70\xaf\xbd\xb8\x80\x2b\xd4\xa6\xa4\x44\xa4\xa4\xc2\xc1\x90\xb7\xbb\x0b\xb0\xc0\xc7\x31\xca\x23\xd7\x69\xae\x0f\x7e\x79\x14\xd4\x2c\x8f\x75\x67\x8a\x51\x1a\xbf\x0a\x24\x8d\x37\x79\x2e\xae\x5f\x87\x2d\xb3\xbd\xc1\x8a\x28\x9f\xee\xc3\x79\xde\x7a\x1f\x40\x12\x5e\xce\xa4\x82\x3d\x61\x97\xdc\x26\xed\x1f\x00\x00\xff\xff\xd9\xba\x4f\x59\x6c\x00\x00\x00")

func confirm_emailHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_confirm_emailHtmlTpl,
		"confirm_email.html.tpl",
	)
}

func confirm_emailHtmlTpl() (*asset, error) {
	bytes, err := confirm_emailHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "confirm_email.html.tpl", size: 108, mode: os.FileMode(436), modTime: time.Unix(1499931564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confirm_emailTxtTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xc1\x0d\xc2\x30\x0c\x05\xd0\x55\xfe\x04\xcc\xc2\x00\xbd\x84\xe0\x82\x85\xf9\xbf\x72\x5c\x55\x55\x95\xdd\x39\x70\x7d\xf7\xb0\x36\x0c\x5d\xdb\x89\xc6\x27\xb6\x36\xca\x50\x6f\xc3\xaa\x08\x1d\xce\x17\xc2\xf9\x81\xb3\x84\x53\x7b\xe2\x91\x3a\x86\x25\x4a\xe8\xe2\xea\xf9\xfd\x7b\xeb\x5d\x3b\x6b\xe1\xc2\xeb\xba\xcd\xf9\x0b\x00\x00\xff\xff\x66\x27\xac\x6d\x5b\x00\x00\x00")

func confirm_emailTxtTplBytes() ([]byte, error) {
	return bindataRead(
		_confirm_emailTxtTpl,
		"confirm_email.txt.tpl",
	)
}

func confirm_emailTxtTpl() (*asset, error) {
	bytes, err := confirm_emailTxtTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "confirm_email.txt.tpl", size: 91, mode: os.FileMode(436), modTime: time.Unix(1499931564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _recover_emailHtmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xd1\x09\xc2\x40\x0c\x06\xe0\xf7\x9b\xe2\xa7\x03\x18\xfa\x1e\x33\x83\xb8\x41\x0c\x91\x88\xc5\x94\xd8\x13\xe4\xb8\xdd\x5d\xc0\x05\x3e\x8e\x55\xae\x6e\xf9\xf1\xc2\x37\x7b\x41\xcd\xb2\xbf\x0e\xa6\x58\xa5\xf1\xad\x40\xd2\x78\x97\xcb\xe6\xfa\x76\xd8\xf6\xb0\x27\x58\x11\xe5\xf7\xf3\x32\xc6\x69\xce\x05\x24\xe1\xe5\x4c\x2a\x38\x12\xf5\x97\xdb\xa5\xfd\x02\x00\x00\xff\xff\x9d\xc9\x73\xb1\x6c\x00\x00\x00")

func recover_emailHtmlTplBytes() ([]byte, error) {
	return bindataRead(
		_recover_emailHtmlTpl,
		"recover_email.html.tpl",
	)
}

func recover_emailHtmlTpl() (*asset, error) {
	bytes, err := recover_emailHtmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "recover_email.html.tpl", size: 108, mode: os.FileMode(436), modTime: time.Unix(1499931564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _recover_emailTxtTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xc1\x0d\xc2\x30\x0c\x05\xd0\x55\xfe\x04\xcc\xc2\x00\xbd\x84\xe0\x82\x85\xf9\xbf\x72\x5c\x55\x55\x95\xdd\x39\x70\x7d\xf7\xb0\x36\x0c\x5d\xdb\x89\xc6\x27\xb6\x36\xca\x50\x6f\xc3\xaa\x08\x1d\xce\x17\xc2\xf9\x81\xb3\x84\x53\x7b\xe2\x91\x3a\x86\x25\x4a\xe8\xe2\xea\xf9\xfd\x7b\xeb\x5d\x3b\x6b\xe1\xc2\xeb\xba\xcd\xf9\x0b\x00\x00\xff\xff\x66\x27\xac\x6d\x5b\x00\x00\x00")

func recover_emailTxtTplBytes() ([]byte, error) {
	return bindataRead(
		_recover_emailTxtTpl,
		"recover_email.txt.tpl",
	)
}

func recover_emailTxtTpl() (*asset, error) {
	bytes, err := recover_emailTxtTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "recover_email.txt.tpl", size: 91, mode: os.FileMode(436), modTime: time.Unix(1499931564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"confirm_email.html.tpl": confirm_emailHtmlTpl,
	"confirm_email.txt.tpl": confirm_emailTxtTpl,
	"recover_email.html.tpl": recover_emailHtmlTpl,
	"recover_email.txt.tpl": recover_emailTxtTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"confirm_email.html.tpl": &bintree{confirm_emailHtmlTpl, map[string]*bintree{}},
	"confirm_email.txt.tpl": &bintree{confirm_emailTxtTpl, map[string]*bintree{}},
	"recover_email.html.tpl": &bintree{recover_emailHtmlTpl, map[string]*bintree{}},
	"recover_email.txt.tpl": &bintree{recover_emailTxtTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

